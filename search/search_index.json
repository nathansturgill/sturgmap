{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to sturgmap","text":"<p>Python package for geospatial analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://nathansturgill.github.io/sturgmap</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Hello! This package was designed for the user looking for geospatial raster/vector and basemap analysis. The package has many capable features include side by side layer maps in folium and split map   functionality used for basemaps and raster files. In the examples section of this website you can see how the split map functionality works for the package in the split map notebook and how it looks when using the side by side function in the folium notebook. The user can also add all kinds of data to whichever basemap they chose to start off with including raster files, shapefiles, vector data, geojson files and more. Below are some of the key features.</p> </li> <li> <p>Creative Interactive Maps </p> </li> <li>Visualize Geospatial Data</li> <li>Visualize Raster and Vector Data with Split Map functionality</li> <li>Import Basemaps and Maps for geospatial analysis</li> </ul>"},{"location":"#aim-of-the-package","title":"Aim of the Package","text":"<ul> <li>This python package is designed to be an introductory package that can handle raster analysis along with geospatial analysis. The idea is that the package will be developed further to create more robust and capable raster analysis functions for users to use with just a few lines of code. </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#sturgmap.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>sturgmap/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/nathansturgill/sturgmap/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>sturgmap could always use more documentation, whether as part of the official sturgmap docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/nathansturgill/sturgmap/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up sturgmap for local development.</p> <ol> <li> <p>Fork the sturgmap repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/sturgmap.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv sturgmap\n$ cd sturgmap/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 sturgmap tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/nathansturgill/sturgmap/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install sturgmap, run this command in your terminal:</p> <pre><code>pip install sturgmap\n</code></pre> <p>This is the preferred method to install sturgmap, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install sturgmap from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/nathansturgill/sturgmap\n</code></pre>"},{"location":"sturgmap/","title":"sturgmap module","text":"<p>Main module.</p>"},{"location":"sturgmap/#sturgmap.sturgmap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Inherits ipyleaflet.Map map class</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>_type_</code> <p>The ipyleaflet.map Class</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"Inherits ipyleaflet.Map map class\n\n    Args:\n        ipyleaflet (_type_): The ipyleaflet.map Class\n    \"\"\"\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            center (list, optional): _description_. Defaults to [20, 0].\n            zoom (int, optional): _description_. Defaults to 2.\n        \"\"\"\n\n        self.split_control=None\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.add_control(ipyleaflet.LayersControl())\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer= ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"Adds a basemap based on the basemap options provided from ipyleaflet.\n\n        Args:\n            name (_type_): _description_\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add_name()\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            data (_type_): _description_\n            name (str, optional): _description_. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n            if \"style\" not in kwargs:\n                kwargs[\"style\"] = {\"color\": \"green\", \"weight\": 1, \"fillOpacity\": 0}\n\n            if \"hover_style\" not in kwargs:\n                kwargs[\"hover_style\"] = {\"fillColor\": \"#00ff00\", \"fillOpacity\": 0.5}\n\n            layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n            self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\" Allows users to add shapefiles to the package and load them\n\n        Args:\n            data (_type_): _description_\n            name (str, optional): _description_. Defaults to \"shp\".\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_vector(self, data, name=\"vector\", **kwargs):\n        \"\"\"\n    Adds a vector data layer to the map.\n\n    Parameters:\n        data (str or GeoDataFrame): The vector data to be added. It can be either a file path to a vector data file (GeoJSON, shapefile, etc.) or a GeoDataFrame object.\n        name (str): The name of the vector data layer. Default is \"vector\".\n        **kwargs: Additional keyword arguments to pass to the add_geojson() method.\n\n    Raises:\n        None\n\n    Returns:\n        None\n    \"\"\"\n        if isinstance(data, str):\n            try:\n\n                vector_data = gpd.read_file(data)\n            except Exception as e:\n                print(f\"Error reading vector data from file: {e}\")\n                return\n        elif isinstance(data, gpd.GeoDataFrame):\n\n            vector_data = data\n        else:\n            print(\"Unsupported vector data format.\")\n            return\n\n\n        geojson_data = vector_data.__geo_interface__\n\n\n        self.add_geojson(geojson_data, name, **kwargs)\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster to the map and allows the user to input whichever raster \n        they choose to analyze.\n\n        Args:\n            data (_type_): _description_\n            name (str, optional): _description_. Defaults to \"raster\".\n            zoom_to_layer (bool, optional): _description_. Defaults to True.\n\n        Raises:\n            ImportError: _description_\n        \"\"\"\n\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Adds an image to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image.\n            name (str, optional): The name of the layer. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_zoom_slider(\n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            \"\"\"This allows users to add new basemaps based on the options given. Also allows for users to close basemap option.\n\n            Args:\n                change (_type_): _description_\n            \"\"\"\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        close_button = widgets.Button(icon=\"times\", layout=widgets.Layout(width=\"auto\"), button_style=\"\")\n\n\n        def close_dropdown(_):\n            \"\"\"This adds functionality for the user to close the selected basemap after\n        they choose one of the four options for their basemap.\n\n            Args:\n                _ (_type_): _description_\n            \"\"\"            \n            self.remove_control(basemap_control)  \n\n        close_button.on_click(close_dropdown)\n\n        widget_box = widgets.VBox([basemap_selector, close_button])\n\n        basemap_control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n\n        self.add_control(basemap_control)\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can add a layer\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n    def split_map_basemap(self, left_layer, right_layer):\n       \"\"\"\n       Creates a split-screen map with two layers side-by-side.\n\n\n       Args:\n           left_layer: The layer to be displayed on the left side of the map.\n               This can be a string representing a basemap URL, a TileLayer instance,\n               or any other layer object supported by ipyleaflet.\n           right_layer: The layer to be displayed on the right side of the map.\n               Same format as left_layer.\n       \"\"\"\n       if self.split_control is not None:\n           self.remove_control(self.split_control)\n\n\n       if not isinstance(left_layer, ipyleaflet.Layer):\n           self.add_tile_layer(left_layer, \"Left Layer\")\n           left_layer = self.layers[-1] \n\n\n       if not isinstance(right_layer, ipyleaflet.Layer):\n           self.add_tile_layer(right_layer, \"Right Layer\")\n           right_layer = self.layers[-2] \n\n       split_map = ipyleaflet.SplitMapControl(left_layer=left_layer, right_layer=right_layer)\n       self.split_control = split_map\n       self.add_control(split_map)\n\n    def add_scale_bar(self, position=\"bottomleft\", **kwargs):\n        \"\"\"Adds a scale bar to the map.\n\n        Args:\n        position (str, optional): The position of the scale bar. Defaults to \"bottomleft\".\n        **kwargs: Additional keyword arguments to pass to the ipyleaflet.ScaleControl constructor.\n        \"\"\"\n        scale_control = ipyleaflet.ScaleControl(position=position, **kwargs)\n        self.add_control(scale_control)\n\n\n    def add_split_map(self, left_layer, right_layer, **kwargs):\n        \"\"\"Adds a split map to the current map.\n        Args:\n            left_layer (object): The left layer of the split map.\n            right_layer (object): The right layer of the split map.\n        \"\"\"\n\n        control = SplitMapControl(\n            left_layer=left_layer,\n            right_layer=right_layer,\n        )\n        self.add(control)\n\n    def add_coordinate_widget(self, position=\"bottomright\"):\n        \"\"\"Adds a coordinate widget to the map to retrieve the coordinates\n        of the position you click on\n\n        Args:\n            position (str, optional): the position of the widget defaults to\n            bottom right of the map display\n        \"\"\"\n\n        output = widgets.Output()\n        control= WidgetControl(widget=output, position=position)\n        self.add(control)\n\n        with output:\n            print(\"click on the map\")\n\n        def update_latlon(**kwargs):\n            with output:\n                if kwargs.get(\"type\") == \"click\":\n                    latlon= kwargs.get(\"coordinates\")\n                    output.clear_output()\n                    print(f\"Latitude: {latlon[0]:.2f}, Longitude: {latlon[1]:.2f}\")\n\n        self.on_interaction(update_latlon)\n\n\n\n\n    def display_raster_histogram(self, raster):\n        \"\"\"\n        Display histogram of pixel values in the raster.\n\n        Args:\n            raster (rasterio.DatasetReader): The raster dataset.\n        \"\"\"\n        data = raster.read(1)\n        plt.hist(data.flatten(), bins=50, color='b', alpha=0.7)\n        plt.xlabel('Pixel Value')\n        plt.ylabel('Frequency')\n        plt.title('Raster Histogram')\n        plt.show()\n\n    def calculate_statistics(self, raster):\n        \"\"\"\n        Calculate basic statistics of the raster.\n\n        Args:\n            raster (rasterio.DatasetReader): The raster dataset.\n        \"\"\"\n        data = raster.read(1)\n        print(f\"Minimum: {data.min()}\")\n        print(f\"Maximum: {data.max()}\")\n        print(f\"Mean: {data.mean()}\")\n        print(f\"Standard Deviation: {data.std()}\")\n\n    def crop_raster(self, raster, bounds):\n        \"\"\"\n        Crop the raster to the specified extent.\n\n        Args:\n            raster (rasterio.DatasetReader): The raster dataset.\n            bounds (tuple): The bounding box to crop to in the format (minx, miny, maxx, maxy).\n        \"\"\"\n        from rasterio.enums import Resampling\n\n        crop_window = rasterio.windows.from_bounds(*bounds, transform=raster.transform)\n\n        cropped_data = raster.read(window=crop_window)\n        cropped_transform = raster.window_transform(crop_window)\n\n\n        new_meta = raster.meta.copy()\n        new_meta.update({\n            'height': crop_window.height,\n            'width': crop_window.width,\n            'transform': cropped_transform\n        })\n\n        return cropped_data, new_meta\n\n    def resample_raster(self, raster, scale_factor):\n        \"\"\"\n        Resample the raster to a different spatial resolution.\n\n        Args:\n            raster (rasterio.DatasetReader): The raster dataset.\n            scale_factor (float): The scaling factor for resampling.\n        \"\"\"\n        from rasterio.enums import Resampling\n\n        data = raster.read(\n            out_shape=(\n                raster.count,\n                int(raster.height * scale_factor),\n                int(raster.width * scale_factor)\n            ),\n            resampling=Resampling.bilinear\n        )\n\n        # Update metadata\n        new_meta = raster.meta.copy()\n        new_meta.update({\n            'height': int(raster.height * scale_factor),\n            'width': int(raster.width * scale_factor),\n            'transform': raster.transform * raster.transform.scale(\n                (raster.width / data.shape[-1]),\n                (raster.height / data.shape[-2])\n            )\n        })\n\n        return data, new_meta\n\n    def compute_ndvi(self, nir_band, red_band):\n        \"\"\"\n        Compute Normalized Difference Vegetation Index (NDVI) from near-infrared and red bands.\n\n        Args:\n            nir_band (rasterio.DatasetReader): The near-infrared band raster dataset.\n            red_band (rasterio.DatasetReader): The red band raster dataset.\n        \"\"\"\n        nir_data = nir_band.read(1).astype(float)\n        red_data = red_band.read(1).astype(float)\n\n        ndvi = (nir_data - red_data) / (nir_data + red_data)\n\n        return ndvi\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>description. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>description. Defaults to 2.</p> <code>2</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        center (list, optional): _description_. Defaults to [20, 0].\n        zoom (int, optional): _description_. Defaults to 2.\n    \"\"\"\n\n    self.split_control=None\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.add_control(ipyleaflet.LayersControl())\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap based on the basemap options provided from ipyleaflet.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>_type_</code> <p>description</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"Adds a basemap based on the basemap options provided from ipyleaflet.\n\n    Args:\n        name (_type_): _description_\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add_name()\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        \"\"\"This allows users to add new basemaps based on the options given. Also allows for users to close basemap option.\n\n        Args:\n            change (_type_): _description_\n        \"\"\"\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    close_button = widgets.Button(icon=\"times\", layout=widgets.Layout(width=\"auto\"), button_style=\"\")\n\n\n    def close_dropdown(_):\n        \"\"\"This adds functionality for the user to close the selected basemap after\n    they choose one of the four options for their basemap.\n\n        Args:\n            _ (_type_): _description_\n        \"\"\"            \n        self.remove_control(basemap_control)  \n\n    close_button.on_click(close_dropdown)\n\n    widget_box = widgets.VBox([basemap_selector, close_button])\n\n    basemap_control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n\n    self.add_control(basemap_control)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_coordinate_widget","title":"<code>add_coordinate_widget(self, position='bottomright')</code>","text":"<p>Adds a coordinate widget to the map to retrieve the coordinates of the position you click on</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>the position of the widget defaults to</p> <code>'bottomright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_coordinate_widget(self, position=\"bottomright\"):\n    \"\"\"Adds a coordinate widget to the map to retrieve the coordinates\n    of the position you click on\n\n    Args:\n        position (str, optional): the position of the widget defaults to\n        bottom right of the map display\n    \"\"\"\n\n    output = widgets.Output()\n    control= WidgetControl(widget=output, position=position)\n    self.add(control)\n\n    with output:\n        print(\"click on the map\")\n\n    def update_latlon(**kwargs):\n        with output:\n            if kwargs.get(\"type\") == \"click\":\n                latlon= kwargs.get(\"coordinates\")\n                output.clear_output()\n                print(f\"Latitude: {latlon[0]:.2f}, Longitude: {latlon[1]:.2f}\")\n\n    self.on_interaction(update_latlon)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): _description_\n        name (str, optional): _description_. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"green\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#00ff00\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Adds an image to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the layer. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster to the map and allows the user to input whichever raster  they choose to analyze.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to \"raster\".</p> <code>'raster'</code> <code>zoom_to_layer</code> <code>bool</code> <p>description. Defaults to True.</p> <code>True</code> <p>Exceptions:</p> Type Description <code>ImportError</code> <p>description</p> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster to the map and allows the user to input whichever raster \n    they choose to analyze.\n\n    Args:\n        data (_type_): _description_\n        name (str, optional): _description_. Defaults to \"raster\".\n        zoom_to_layer (bool, optional): _description_. Defaults to True.\n\n    Raises:\n        ImportError: _description_\n    \"\"\"\n\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_scale_bar","title":"<code>add_scale_bar(self, position='bottomleft', **kwargs)</code>","text":"<p>Adds a scale bar to the map.</p> <p>position (str, optional): The position of the scale bar. Defaults to \"bottomleft\". **kwargs: Additional keyword arguments to pass to the ipyleaflet.ScaleControl constructor.</p> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_scale_bar(self, position=\"bottomleft\", **kwargs):\n    \"\"\"Adds a scale bar to the map.\n\n    Args:\n    position (str, optional): The position of the scale bar. Defaults to \"bottomleft\".\n    **kwargs: Additional keyword arguments to pass to the ipyleaflet.ScaleControl constructor.\n    \"\"\"\n    scale_control = ipyleaflet.ScaleControl(position=position, **kwargs)\n    self.add_control(scale_control)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Allows users to add shapefiles to the package and load them</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to \"shp\".</p> <code>'shp'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\" Allows users to add shapefiles to the package and load them\n\n    Args:\n        data (_type_): _description_\n        name (str, optional): _description_. Defaults to \"shp\".\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_split_map","title":"<code>add_split_map(self, left_layer, right_layer, **kwargs)</code>","text":"<p>Adds a split map to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>left_layer</code> <code>object</code> <p>The left layer of the split map.</p> required <code>right_layer</code> <code>object</code> <p>The right layer of the split map.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_split_map(self, left_layer, right_layer, **kwargs):\n    \"\"\"Adds a split map to the current map.\n    Args:\n        left_layer (object): The left layer of the split map.\n        right_layer (object): The right layer of the split map.\n    \"\"\"\n\n    control = SplitMapControl(\n        left_layer=left_layer,\n        right_layer=right_layer,\n    )\n    self.add(control)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                print(f\"You can add a layer\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_vector","title":"<code>add_vector(self, data, name='vector', **kwargs)</code>","text":"<p>Adds a vector data layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or GeoDataFrame</code> <p>The vector data to be added. It can be either a file path to a vector data file (GeoJSON, shapefile, etc.) or a GeoDataFrame object.</p> required <code>name</code> <code>str</code> <p>The name of the vector data layer. Default is \"vector\".</p> <code>'vector'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the add_geojson() method.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_vector(self, data, name=\"vector\", **kwargs):\n    \"\"\"\nAdds a vector data layer to the map.\n\nParameters:\n    data (str or GeoDataFrame): The vector data to be added. It can be either a file path to a vector data file (GeoJSON, shapefile, etc.) or a GeoDataFrame object.\n    name (str): The name of the vector data layer. Default is \"vector\".\n    **kwargs: Additional keyword arguments to pass to the add_geojson() method.\n\nRaises:\n    None\n\nReturns:\n    None\n\"\"\"\n    if isinstance(data, str):\n        try:\n\n            vector_data = gpd.read_file(data)\n        except Exception as e:\n            print(f\"Error reading vector data from file: {e}\")\n            return\n    elif isinstance(data, gpd.GeoDataFrame):\n\n        vector_data = data\n    else:\n        print(\"Unsupported vector data format.\")\n        return\n\n\n    geojson_data = vector_data.__geo_interface__\n\n\n    self.add_geojson(geojson_data, name, **kwargs)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def add_zoom_slider(\n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.calculate_statistics","title":"<code>calculate_statistics(self, raster)</code>","text":"<p>Calculate basic statistics of the raster.</p> <p>Parameters:</p> Name Type Description Default <code>raster</code> <code>rasterio.DatasetReader</code> <p>The raster dataset.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def calculate_statistics(self, raster):\n    \"\"\"\n    Calculate basic statistics of the raster.\n\n    Args:\n        raster (rasterio.DatasetReader): The raster dataset.\n    \"\"\"\n    data = raster.read(1)\n    print(f\"Minimum: {data.min()}\")\n    print(f\"Maximum: {data.max()}\")\n    print(f\"Mean: {data.mean()}\")\n    print(f\"Standard Deviation: {data.std()}\")\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.compute_ndvi","title":"<code>compute_ndvi(self, nir_band, red_band)</code>","text":"<p>Compute Normalized Difference Vegetation Index (NDVI) from near-infrared and red bands.</p> <p>Parameters:</p> Name Type Description Default <code>nir_band</code> <code>rasterio.DatasetReader</code> <p>The near-infrared band raster dataset.</p> required <code>red_band</code> <code>rasterio.DatasetReader</code> <p>The red band raster dataset.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def compute_ndvi(self, nir_band, red_band):\n    \"\"\"\n    Compute Normalized Difference Vegetation Index (NDVI) from near-infrared and red bands.\n\n    Args:\n        nir_band (rasterio.DatasetReader): The near-infrared band raster dataset.\n        red_band (rasterio.DatasetReader): The red band raster dataset.\n    \"\"\"\n    nir_data = nir_band.read(1).astype(float)\n    red_data = red_band.read(1).astype(float)\n\n    ndvi = (nir_data - red_data) / (nir_data + red_data)\n\n    return ndvi\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.crop_raster","title":"<code>crop_raster(self, raster, bounds)</code>","text":"<p>Crop the raster to the specified extent.</p> <p>Parameters:</p> Name Type Description Default <code>raster</code> <code>rasterio.DatasetReader</code> <p>The raster dataset.</p> required <code>bounds</code> <code>tuple</code> <p>The bounding box to crop to in the format (minx, miny, maxx, maxy).</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def crop_raster(self, raster, bounds):\n    \"\"\"\n    Crop the raster to the specified extent.\n\n    Args:\n        raster (rasterio.DatasetReader): The raster dataset.\n        bounds (tuple): The bounding box to crop to in the format (minx, miny, maxx, maxy).\n    \"\"\"\n    from rasterio.enums import Resampling\n\n    crop_window = rasterio.windows.from_bounds(*bounds, transform=raster.transform)\n\n    cropped_data = raster.read(window=crop_window)\n    cropped_transform = raster.window_transform(crop_window)\n\n\n    new_meta = raster.meta.copy()\n    new_meta.update({\n        'height': crop_window.height,\n        'width': crop_window.width,\n        'transform': cropped_transform\n    })\n\n    return cropped_data, new_meta\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.display_raster_histogram","title":"<code>display_raster_histogram(self, raster)</code>","text":"<p>Display histogram of pixel values in the raster.</p> <p>Parameters:</p> Name Type Description Default <code>raster</code> <code>rasterio.DatasetReader</code> <p>The raster dataset.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def display_raster_histogram(self, raster):\n    \"\"\"\n    Display histogram of pixel values in the raster.\n\n    Args:\n        raster (rasterio.DatasetReader): The raster dataset.\n    \"\"\"\n    data = raster.read(1)\n    plt.hist(data.flatten(), bins=50, color='b', alpha=0.7)\n    plt.xlabel('Pixel Value')\n    plt.ylabel('Frequency')\n    plt.title('Raster Histogram')\n    plt.show()\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.resample_raster","title":"<code>resample_raster(self, raster, scale_factor)</code>","text":"<p>Resample the raster to a different spatial resolution.</p> <p>Parameters:</p> Name Type Description Default <code>raster</code> <code>rasterio.DatasetReader</code> <p>The raster dataset.</p> required <code>scale_factor</code> <code>float</code> <p>The scaling factor for resampling.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def resample_raster(self, raster, scale_factor):\n    \"\"\"\n    Resample the raster to a different spatial resolution.\n\n    Args:\n        raster (rasterio.DatasetReader): The raster dataset.\n        scale_factor (float): The scaling factor for resampling.\n    \"\"\"\n    from rasterio.enums import Resampling\n\n    data = raster.read(\n        out_shape=(\n            raster.count,\n            int(raster.height * scale_factor),\n            int(raster.width * scale_factor)\n        ),\n        resampling=Resampling.bilinear\n    )\n\n    # Update metadata\n    new_meta = raster.meta.copy()\n    new_meta.update({\n        'height': int(raster.height * scale_factor),\n        'width': int(raster.width * scale_factor),\n        'transform': raster.transform * raster.transform.scale(\n            (raster.width / data.shape[-1]),\n            (raster.height / data.shape[-2])\n        )\n    })\n\n    return data, new_meta\n</code></pre>"},{"location":"sturgmap/#sturgmap.sturgmap.Map.split_map_basemap","title":"<code>split_map_basemap(self, left_layer, right_layer)</code>","text":"<p>Creates a split-screen map with two layers side-by-side.</p> <p>Parameters:</p> Name Type Description Default <code>left_layer</code> <p>The layer to be displayed on the left side of the map. This can be a string representing a basemap URL, a TileLayer instance, or any other layer object supported by ipyleaflet.</p> required <code>right_layer</code> <p>The layer to be displayed on the right side of the map. Same format as left_layer.</p> required Source code in <code>sturgmap/sturgmap.py</code> <pre><code>def split_map_basemap(self, left_layer, right_layer):\n   \"\"\"\n   Creates a split-screen map with two layers side-by-side.\n\n\n   Args:\n       left_layer: The layer to be displayed on the left side of the map.\n           This can be a string representing a basemap URL, a TileLayer instance,\n           or any other layer object supported by ipyleaflet.\n       right_layer: The layer to be displayed on the right side of the map.\n           Same format as left_layer.\n   \"\"\"\n   if self.split_control is not None:\n       self.remove_control(self.split_control)\n\n\n   if not isinstance(left_layer, ipyleaflet.Layer):\n       self.add_tile_layer(left_layer, \"Left Layer\")\n       left_layer = self.layers[-1] \n\n\n   if not isinstance(right_layer, ipyleaflet.Layer):\n       self.add_tile_layer(right_layer, \"Right Layer\")\n       right_layer = self.layers[-2] \n\n   split_map = ipyleaflet.SplitMapControl(left_layer=left_layer, right_layer=right_layer)\n   self.split_control = split_map\n   self.add_control(split_map)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use sturgmap in a mapping project:</p> <p><pre><code>import sturgmap\n</code></pre> Directly works with packages by correlation:</p> <p><pre><code>import ipyleaft\n</code></pre> <pre><code>import folium\n</code></pre></p>"},{"location":"510labs/GEOG510_lab5/","title":"GEOG510 lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    \"first_name\": \"Morgan\",\n    \"last_name\": \"Freeman\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\nprint( person_info[\"first_name\"])\nprint( person_info[\"last_name\"])\nprint( person_info[\"age\"])\nprint( person_info[\"city\"])\n</pre> person_info = {     \"first_name\": \"Morgan\",     \"last_name\": \"Freeman\",     \"age\": 30,     \"city\": \"New York\" }  print( person_info[\"first_name\"]) print( person_info[\"last_name\"]) print( person_info[\"age\"]) print( person_info[\"city\"])  <pre>Morgan\nFreeman\n30\nNew York\n</pre> In\u00a0[2]: Copied! <pre>favorite_numbers = {\n    \"Alice\": 7,\n    \"Bob\": 12,\n    \"Charlie\": 5,\n    \"David\": 9,\n    \"Emily\": 3\n}\n\nfor name, number in favorite_numbers.items():\n    print(f\"{name}'s favorite number is {number}.\")\n</pre> favorite_numbers = {     \"Alice\": 7,     \"Bob\": 12,     \"Charlie\": 5,     \"David\": 9,     \"Emily\": 3 }  for name, number in favorite_numbers.items():     print(f\"{name}'s favorite number is {number}.\")  <pre>Alice's favorite number is 7.\nBob's favorite number is 12.\nCharlie's favorite number is 5.\nDavid's favorite number is 9.\nEmily's favorite number is 3.\n</pre> In\u00a0[3]: Copied! <pre>glossary = {\n    \"variable\": \"A placeholder for storing data value.\",\n    \"comment\": \"A comment allows you to wrote notes in English in your parameters.\",\n    \"function\": \"A block of code that only runs when it is called.\",\n    \"list\": \"A list is a collection of items in a particular order\",\n    \"loop\": \"A programming construct that repeats a block of code until a specified condition is met.\",\n    \"dictionary\": \"A collection which is unordered, changeable, and indexed. No duplicate members.\"\n}\n\n\nfor word, meaning in glossary.items():\n    print(f\"{word}: {meaning}\\n\")\n</pre>  glossary = {     \"variable\": \"A placeholder for storing data value.\",     \"comment\": \"A comment allows you to wrote notes in English in your parameters.\",     \"function\": \"A block of code that only runs when it is called.\",     \"list\": \"A list is a collection of items in a particular order\",     \"loop\": \"A programming construct that repeats a block of code until a specified condition is met.\",     \"dictionary\": \"A collection which is unordered, changeable, and indexed. No duplicate members.\" }   for word, meaning in glossary.items():     print(f\"{word}: {meaning}\\n\")  <pre>variable: A placeholder for storing data value.\n\ncomment: A comment allows you to wrote notes in English in your parameters.\n\nfunction: A block of code that only runs when it is called.\n\nlist: A list is a collection of items in a particular order\n\nloop: A programming construct that repeats a block of code until a specified condition is met.\n\ndictionary: A collection which is unordered, changeable, and indexed. No duplicate members.\n\n</pre> In\u00a0[4]: Copied! <pre>glossary = {\n    \"variable\": \"A placeholder for storing data value.\",\n    \"comment\": \"A comment allows you to write notes in English in your parameters.\",\n    \"function\": \"A block of code that only runs when it is called.\",\n    \"list\": \"A list is a collection of items in a particular order.\",\n    \"loop\": \"A programming construct that repeats a block of code until a specified condition is met.\",\n    \"dictionary\": \"A collection which is unordered, changeable, and indexed. No duplicate members.\",\n    \"module\": \"A file containing Python definitions and statements.\",\n    \"string\": \"A sequence of characters, used to represent text.\",\n    \"tuple\": \"A collection which is ordered and unchangeable. Allows duplicate members.\",\n    \"conditional statements\": \"Allow you to check any condition of interest\"\n}\n\n\nfor word, meaning in glossary.items():\n    print(f\"{word}:\\n {meaning}\\n\")\n</pre>  glossary = {     \"variable\": \"A placeholder for storing data value.\",     \"comment\": \"A comment allows you to write notes in English in your parameters.\",     \"function\": \"A block of code that only runs when it is called.\",     \"list\": \"A list is a collection of items in a particular order.\",     \"loop\": \"A programming construct that repeats a block of code until a specified condition is met.\",     \"dictionary\": \"A collection which is unordered, changeable, and indexed. No duplicate members.\",     \"module\": \"A file containing Python definitions and statements.\",     \"string\": \"A sequence of characters, used to represent text.\",     \"tuple\": \"A collection which is ordered and unchangeable. Allows duplicate members.\",     \"conditional statements\": \"Allow you to check any condition of interest\" }   for word, meaning in glossary.items():     print(f\"{word}:\\n {meaning}\\n\")  <pre>variable:\n A placeholder for storing data value.\n\ncomment:\n A comment allows you to write notes in English in your parameters.\n\nfunction:\n A block of code that only runs when it is called.\n\nlist:\n A list is a collection of items in a particular order.\n\nloop:\n A programming construct that repeats a block of code until a specified condition is met.\n\ndictionary:\n A collection which is unordered, changeable, and indexed. No duplicate members.\n\nmodule:\n A file containing Python definitions and statements.\n\nstring:\n A sequence of characters, used to represent text.\n\ntuple:\n A collection which is ordered and unchangeable. Allows duplicate members.\n\nconditional statements:\n Allow you to check any condition of interest\n\n</pre> In\u00a0[5]: Copied! <pre>major_rivers = {\n    \"Nile\": \"Egypt\",\n    \"Amazon\": \"Brazil\",\n    \"Mississippi\": \"United States\"\n}\n\nprint(\"Sentences about each river:\")\nfor river, country in major_rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\n\nprint(\"\\nNames of rivers:\")\nfor river in major_rivers:\n    print(river)\n\n\nprint(\"\\nNames of countries:\")\nfor country in major_rivers.values():\n    print(country)\n</pre> major_rivers = {     \"Nile\": \"Egypt\",     \"Amazon\": \"Brazil\",     \"Mississippi\": \"United States\" }  print(\"Sentences about each river:\") for river, country in major_rivers.items():     print(f\"The {river} runs through {country}.\")   print(\"\\nNames of rivers:\") for river in major_rivers:     print(river)   print(\"\\nNames of countries:\") for country in major_rivers.values():     print(country) <pre>Sentences about each river:\nThe Nile runs through Egypt.\nThe Amazon runs through Brazil.\nThe Mississippi runs through United States.\n\nNames of rivers:\nNile\nAmazon\nMississippi\n\nNames of countries:\nEgypt\nBrazil\nUnited States\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    \"Tokyo\": {\n        \"country\": \"Japan\",\n        \"population\": \"37.4 million\",\n        \"fact\": \"Tokyo is the largest metropolitan area in the world.\"\n    },\n    \"New York\": {\n        \"country\": \"United States\",\n        \"population\": \"8.4 million\",\n        \"fact\": \"New York City is known as the city that never sleeps.\"\n    },\n    \"London\": {\n        \"country\": \"United Kingdom\",\n        \"population\": \"8.9 million\",\n        \"fact\": \"London is home to the oldest pub in the world.\"\n    }\n}\n\n\nfor city, info in cities.items():\n    print(f\"{city}:\")\n    print(f\"Country: {info['country']}\")\n    print(f\"Population: {info['population']}\")\n    print(f\"Fact: {info['fact']}\\n\")\n</pre> cities = {     \"Tokyo\": {         \"country\": \"Japan\",         \"population\": \"37.4 million\",         \"fact\": \"Tokyo is the largest metropolitan area in the world.\"     },     \"New York\": {         \"country\": \"United States\",         \"population\": \"8.4 million\",         \"fact\": \"New York City is known as the city that never sleeps.\"     },     \"London\": {         \"country\": \"United Kingdom\",         \"population\": \"8.9 million\",         \"fact\": \"London is home to the oldest pub in the world.\"     } }   for city, info in cities.items():     print(f\"{city}:\")     print(f\"Country: {info['country']}\")     print(f\"Population: {info['population']}\")     print(f\"Fact: {info['fact']}\\n\")   <pre>Tokyo:\nCountry: Japan\nPopulation: 37.4 million\nFact: Tokyo is the largest metropolitan area in the world.\n\nNew York:\nCountry: United States\nPopulation: 8.4 million\nFact: New York City is known as the city that never sleeps.\n\nLondon:\nCountry: United Kingdom\nPopulation: 8.9 million\nFact: London is home to the oldest pub in the world.\n\n</pre> In\u00a0[7]: Copied! <pre>rental_car = input(\"What kind of rental car would you like? \")\n\n\nprint(f\"Let me see if I can find you a {rental_car}.\")\n</pre> rental_car = input(\"What kind of rental car would you like? \")   print(f\"Let me see if I can find you a {rental_car}.\")  <pre>Let me see if I can find you a kia.\n</pre> In\u00a0[8]: Copied! <pre>dinner_group = input(\"How many people are in your dinner group? \")\ndinner_group = int(dinner_group)\nif dinner_group &gt; 8:\n    print (\"Sorry you will have to wait for a table.\")\nelse: \n    print(\"Your table is ready.\")\n</pre> dinner_group = input(\"How many people are in your dinner group? \") dinner_group = int(dinner_group) if dinner_group &gt; 8:     print (\"Sorry you will have to wait for a table.\") else:      print(\"Your table is ready.\") <pre>Sorry you will have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>number = input(\"Please enter a number: \")\nnumber = int(number)\n\nif number % 10 == 0:\n    print(f\"{number} is a multiple of 10.\")\nelse:\n    print(f\"{number} is not a multiple of 10.\")\n</pre> number = input(\"Please enter a number: \") number = int(number)  if number % 10 == 0:     print(f\"{number} is a multiple of 10.\") else:     print(f\"{number} is not a multiple of 10.\")  <pre>263 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>pizza_toppings = []\n\nwhile True:\n    topping = input(\"Enter a pizza topping (enter 'quit' to finish): \")\n\n    if topping.lower() == 'quit':\n        break  \n    \n    pizza_toppings.append(topping)\n    print(f\"Adding {topping} to your pizza.\")\n\nprint(\"\\nYour pizza will have the following toppings:\")\nfor topping in pizza_toppings:\n    print(topping)\n</pre> pizza_toppings = []  while True:     topping = input(\"Enter a pizza topping (enter 'quit' to finish): \")      if topping.lower() == 'quit':         break            pizza_toppings.append(topping)     print(f\"Adding {topping} to your pizza.\")  print(\"\\nYour pizza will have the following toppings:\") for topping in pizza_toppings:     print(topping) <pre>Adding pepperoni to your pizza.\nAdding mushroom to your pizza.\n\nYour pizza will have the following toppings:\npepperoni\nmushroom\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    message = \"In this chapter, we are learning about functions in Python.\"\n    print(message)\n    \ndisplay_message()\n</pre> def display_message():     message = \"In this chapter, we are learning about functions in Python.\"     print(message)      display_message()  <pre>In this chapter, we are learning about functions in Python.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    print (f\"One of my favorite books is {title}\")\n    \nfavorite_book(\"Invisible Man\")\n</pre> def favorite_book(title):     print (f\"One of my favorite books is {title}\")      favorite_book(\"Invisible Man\") <pre>One of my favorite books is Invisible Man\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    \"\"\"Prints a summary of the shirt size and message.\"\"\"\n    print(f\"Shirt size: {size.lower()}, Message: '{message}'\")\n\nmake_shirt(\"medium\", \"Dr.Wu's Class,\")\n\nmake_shirt(\"large\", \"Is the best!\")\n</pre> def make_shirt(size, message):     \"\"\"Prints a summary of the shirt size and message.\"\"\"     print(f\"Shirt size: {size.lower()}, Message: '{message}'\")  make_shirt(\"medium\", \"Dr.Wu's Class,\")  make_shirt(\"large\", \"Is the best!\")  <pre>Shirt size: medium, Message: 'Dr.Wu's Class,'\nShirt size: large, Message: 'Is the best!'\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size=\"large\", message=\"I love Python\"):\n    print(f\"Shirt size: {size.title()}, Message: '{message}'\")\n\nmake_shirt()\n\nmake_shirt(\"medium\")\n\nmake_shirt(\"small\", \"Keep calm and code on!\")\n</pre> def make_shirt(size=\"large\", message=\"I love Python\"):     print(f\"Shirt size: {size.title()}, Message: '{message}'\")  make_shirt()  make_shirt(\"medium\")  make_shirt(\"small\", \"Keep calm and code on!\") <pre>Shirt size: Large, Message: 'I love Python'\nShirt size: Medium, Message: 'I love Python'\nShirt size: Small, Message: 'Keep calm and code on!'\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country=\"Iceland\"):\n  print(f\"{city.title()} is in {country.title()}.\")\n\ndescribe_city(\"Tokyo\", \"Japan\")\ndescribe_city(\"Reykjavik\")\ndescribe_city(\"Toronto\", \"Canada\")\n</pre> def describe_city(city, country=\"Iceland\"):   print(f\"{city.title()} is in {country.title()}.\")  describe_city(\"Tokyo\", \"Japan\") describe_city(\"Reykjavik\") describe_city(\"Toronto\", \"Canada\") <pre>Tokyo is in Japan.\nReykjavik is in Iceland.\nToronto is in Canada.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n  return f\"{city.title()}, {country.title()}\"\n\nprint(city_country(\"london\", \"england\"))\nprint(city_country(\"cairo\", \"egypt\"))\nprint(city_country(\"new york city\", \"usa\"))\n</pre> def city_country(city, country):   return f\"{city.title()}, {country.title()}\"  print(city_country(\"london\", \"england\")) print(city_country(\"cairo\", \"egypt\")) print(city_country(\"new york city\", \"usa\")) <pre>London, England\nCairo, Egypt\nNew York City, Usa\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n  album = {'artist': artist_name.title(), 'album': album_title.title()}\n  if number_of_songs:\n    album['songs'] = number_of_songs\n  return album\n\nalbum1 = make_album(\"grateful dead\", \"american beauty\")\nalbum2 = make_album(\"the beatles\", \"abbey road\")\nalbum3 = make_album(\"kendrick lamar\", \"to pimp a butterfly\", 16)\n\nprint(album1)\nprint(album2)\nprint(album3)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):   album = {'artist': artist_name.title(), 'album': album_title.title()}   if number_of_songs:     album['songs'] = number_of_songs   return album  album1 = make_album(\"grateful dead\", \"american beauty\") album2 = make_album(\"the beatles\", \"abbey road\") album3 = make_album(\"kendrick lamar\", \"to pimp a butterfly\", 16)  print(album1) print(album2) print(album3) <pre>{'artist': 'Grateful Dead', 'album': 'American Beauty'}\n{'artist': 'The Beatles', 'album': 'Abbey Road'}\n{'artist': 'Kendrick Lamar', 'album': 'To Pimp A Butterfly', 'songs': 16}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n\n  album = {'artist': artist_name.title(), 'album': album_title.title()}\n  if number_of_songs:\n    album['songs'] = number_of_songs\n  return album\n\nwhile True:\n  print(\"\\nEnter 'q' to quit.\")\n  artist_name = input(\"Artist name: \")\n  if artist_name.lower() == 'q':\n    break\n\n  album_title = input(\"Album title: \")\n\n  number_of_songs = input(\"Number of songs (optional): \")\n  if number_of_songs.isdigit():\n    number_of_songs = int(number_of_songs)\n  else:\n    number_of_songs = None\n\n  album = make_album(artist_name, album_title, number_of_songs)\n  print(album)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):    album = {'artist': artist_name.title(), 'album': album_title.title()}   if number_of_songs:     album['songs'] = number_of_songs   return album  while True:   print(\"\\nEnter 'q' to quit.\")   artist_name = input(\"Artist name: \")   if artist_name.lower() == 'q':     break    album_title = input(\"Album title: \")    number_of_songs = input(\"Number of songs (optional): \")   if number_of_songs.isdigit():     number_of_songs = int(number_of_songs)   else:     number_of_songs = None    album = make_album(artist_name, album_title, number_of_songs)   print(album) <pre>\nEnter 'q' to quit.\n{'artist': 'Grateful Dead', 'album': 'Workingmans Dead', 'songs': 12}\n\nEnter 'q' to quit.\n{'artist': 'Beatles', 'album': 'White Revolver', 'songs': 13}\n\nEnter 'q' to quit.\n{'artist': 'Rolling Stones', 'album': 'Paint It Black', 'songs': 14}\n\nEnter 'q' to quit.\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):  \n  for message in messages:\n    print(message)\n\nmessages = [\"Whats up!\", \"Whats going on?\", \"See you later, alligator!\"]\n\nshow_messages (messages)\n</pre> def show_messages(messages):     for message in messages:     print(message)  messages = [\"Whats up!\", \"Whats going on?\", \"See you later, alligator!\"]  show_messages (messages) <pre>Whats up!\nWhats going on?\nSee you later, alligator!\n</pre> In\u00a0[4]: Copied! <pre>def show_messages(messages):\n\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    \n    while messages:\n        current_message = messages.pop(0)\n        print(\"Sending message.\", current_message)\n        sent_messages.append(current_message)\n\n\nmessages = [\"Whats up!\", \"Whats going on?\", \"See you later, alligator!\"]\n\n\nsent_messages = []\n\nsend_messages(messages, sent_messages)\n\nprint(\"\\nOriginal messages:\")\nshow_messages(messages)\nprint(\"\\nSent messages:\")\nshow_messages(sent_messages)\n</pre> def show_messages(messages):      for message in messages:         print(message)  def send_messages(messages, sent_messages):          while messages:         current_message = messages.pop(0)         print(\"Sending message.\", current_message)         sent_messages.append(current_message)   messages = [\"Whats up!\", \"Whats going on?\", \"See you later, alligator!\"]   sent_messages = []  send_messages(messages, sent_messages)  print(\"\\nOriginal messages:\") show_messages(messages) print(\"\\nSent messages:\") show_messages(sent_messages)   <pre>Sending message. Whats up!\nSending message. Whats going on?\nSending message. See you later, alligator!\n\nOriginal messages:\n\nSent messages:\nWhats up!\nWhats going on?\nSee you later, alligator!\n</pre> In\u00a0[21]: Copied! <pre>print(\" Reading the file by reading in the entire file \")\nwith open('learning_python.txt', 'r') as file:\n    contents = file.read()\n    print(contents)\n</pre> print(\" Reading the file by reading in the entire file \") with open('learning_python.txt', 'r') as file:     contents = file.read()     print(contents) <pre> Reading the file by reading in the entire file \n In python you can create loops to loop through a dictionary.\\\nIn python you can create while loops for conditional if and statements until the code is told to stop executing.\\\nIn python you can create lists that are ordered and undordered. \\\nIn python you can create different kinds of functions for your packages.\n</pre> In\u00a0[22]: Copied! <pre>print(\"\\n Reading the file by looping over the file object \")\nwith open('learning_python.txt', 'r') as file:\n    for line in file:\n        print(line.strip())\n</pre> print(\"\\n Reading the file by looping over the file object \") with open('learning_python.txt', 'r') as file:     for line in file:         print(line.strip()) <pre>\n Reading the file by looping over the file object \nIn python you can create loops to loop through a dictionary.\\\nIn python you can create while loops for conditional if and statements until the code is told to stop executing.\\\nIn python you can create lists that are ordered and undordered. \\\nIn python you can create different kinds of functions for your packages.\n</pre> In\u00a0[23]: Copied! <pre>print(\"\\n Reading the file by storing lines in a list and working with them outside the with block \")\nlines = []\nwith open('learning_python.txt', 'r') as file:\n    lines = file.readlines()\n\nfor line in lines:\n    print(line.strip())\n</pre>  print(\"\\n Reading the file by storing lines in a list and working with them outside the with block \") lines = [] with open('learning_python.txt', 'r') as file:     lines = file.readlines()  for line in lines:     print(line.strip()) <pre>\n Reading the file by storing lines in a list and working with them outside the with block \nIn python you can create loops to loop through a dictionary.\\\nIn python you can create while loops for conditional if and statements until the code is told to stop executing.\\\nIn python you can create lists that are ordered and undordered. \\\nIn python you can create different kinds of functions for your packages.\n</pre> In\u00a0[24]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    for line in file:\n        modified_line = line.replace('python', 'C')\n        print(modified_line.strip())\n</pre> with open('learning_python.txt', 'r') as file:     for line in file:         modified_line = line.replace('python', 'C')         print(modified_line.strip()) <pre>In C you can create loops to loop through a dictionary.\\\nIn C you can create while loops for conditional if and statements until the code is told to stop executing.\\\nIn C you can create lists that are ordered and undordered. \\\nIn C you can create different kinds of functions for your packages.\n</pre> In\u00a0[25]: Copied! <pre>name = input(\"Please enter your name: \")\n\n\nwith open('guest.txt', 'w') as file:\n    file.write(name)\n\nprint(\"Your name has been written to guest list\")\n</pre>  name = input(\"Please enter your name: \")   with open('guest.txt', 'w') as file:     file.write(name)  print(\"Your name has been written to guest list\")  <pre>Your name has been written to guest list\n</pre> In\u00a0[26]: Copied! <pre>with open('guest_book.txt', 'a') as file:\n    while True:\n    \n        name = input(\"Please enter your name (enter 'q' to quit): \")\n\n      \n        if name.lower() == 'q':\n            break \n\n        print(f\"Welcome, {name}!\")\n        file.write(name +'\\n') \n\nprint(\"Thank you for visiting!\")\n</pre> with open('guest_book.txt', 'a') as file:     while True:              name = input(\"Please enter your name (enter 'q' to quit): \")                 if name.lower() == 'q':             break           print(f\"Welcome, {name}!\")         file.write(name +'\\n')   print(\"Thank you for visiting!\")  <pre>Welcome, will sturgill!\nThank you for visiting!\n</pre> In\u00a0[27]: Copied! <pre>with open('programming.txt', 'a') as file:\n    while True:\n        reason = input(\"Why do you like programming? (Enter 'q' to quit): \")\n\n        if reason.lower() == 'q':\n            break \n\n        file.write(reason + '\\n')\n\nprint(\"Thank you for sharing your thoughts!\")\n</pre> with open('programming.txt', 'a') as file:     while True:         reason = input(\"Why do you like programming? (Enter 'q' to quit): \")          if reason.lower() == 'q':             break           file.write(reason + '\\n')  print(\"Thank you for sharing your thoughts!\") <pre>Thank you for sharing your thoughts!\n</pre> In\u00a0[28]: Copied! <pre>while True:\n    try:\n      \n        number1 = input(\"enter the first number: \")\n        number2 = input(\"enter the second number: \")\n\n        result = int(number1) + int(number2)\n\n        print(\"The sum of\", number1, \"and\", number2, \"is:\", result)\n\n        break\n\n    except ValueError:\n       \n        print(\"please enter valid numbers.\")\n\nprint(\"thank you for using the program!\")\n</pre> while True:     try:                number1 = input(\"enter the first number: \")         number2 = input(\"enter the second number: \")          result = int(number1) + int(number2)          print(\"The sum of\", number1, \"and\", number2, \"is:\", result)          break      except ValueError:                 print(\"please enter valid numbers.\")  print(\"thank you for using the program!\") <pre>The sum of 3 and 2 is: 5\nthank you for using the program!\n</pre> In\u00a0[29]: Copied! <pre>while True:\n    try:\n        \n        number1 = input(\"Enter the first number: \")\n        number2 = input(\"Enter the second number: \")\n\n        \n        result = int(number1) + int(number2)\n\n        \n        print(\"The sum of\", number1, \"and\", number2, \"is:\", result)\n\n    except ValueError:\n        print(\"Please enter valid numbers.\")\n    else:\n        choice = input(\"Do you want to continue? (yes/no): \").lower()\n        if choice != 'yes':\n            break\n\nprint(\"Thank you for using the program!\")\n</pre> while True:     try:                  number1 = input(\"Enter the first number: \")         number2 = input(\"Enter the second number: \")                   result = int(number1) + int(number2)                   print(\"The sum of\", number1, \"and\", number2, \"is:\", result)      except ValueError:         print(\"Please enter valid numbers.\")     else:         choice = input(\"Do you want to continue? (yes/no): \").lower()         if choice != 'yes':             break  print(\"Thank you for using the program!\")  <pre>Please enter valid numbers.\nPlease enter valid numbers.\nThe sum of 6 and 7 is: 13\nThank you for using the program!\n</pre> In\u00a0[38]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cats_file:\n        print(\" Cats \")\n        print(cats_file.read())\n\n    with open('dogs.txt', 'r') as dogs_file:\n        print(\" Dogs \")\n        print(dogs_file.read())\n\nexcept FileNotFoundError:\n    print(\"One or more files are missing.\")\n</pre> try:     with open('cats.txt', 'r') as cats_file:         print(\" Cats \")         print(cats_file.read())      with open('dogs.txt', 'r') as dogs_file:         print(\" Dogs \")         print(dogs_file.read())  except FileNotFoundError:     print(\"One or more files are missing.\")  <pre> Cats \nwinky \npinky\ndinky\n Dogs \nshadrack\nmishack\nabidingo\n</pre> In\u00a0[39]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cats_file:\n        print(\" Cats \")\n        print(cats_file.read())\n\n    with open('dogs.txt', 'r') as dogs_file:\n        print(\" Dogs \")\n        print(dogs_file.read())\n\nexcept FileNotFoundError:\n    print(\"One or more files are missing.\")\n</pre> try:     with open('cats.txt', 'r') as cats_file:         print(\" Cats \")         print(cats_file.read())      with open('dogs.txt', 'r') as dogs_file:         print(\" Dogs \")         print(dogs_file.read())  except FileNotFoundError:     print(\"One or more files are missing.\") <pre> Cats \nwinky \npinky\ndinky\nOne or more files are missing.\n</pre> In\u00a0[40]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cats_file:\n        print(\" Cats \")\n        print(cats_file.read())\n\n    with open('dogs.txt', 'r') as dogs_file:\n        print(\" Dogs \")\n        print(dogs_file.read())\n\nexcept FileNotFoundError:\n   pass\n</pre> try:     with open('cats.txt', 'r') as cats_file:         print(\" Cats \")         print(cats_file.read())      with open('dogs.txt', 'r') as dogs_file:         print(\" Dogs \")         print(dogs_file.read())  except FileNotFoundError:    pass <pre> Cats \nwinky \npinky\ndinky\n</pre> In\u00a0[33]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[33]: <pre>2</pre> In\u00a0[34]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[34]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[35]: Copied! <pre>def count_word_occurrences(file_path, word):\n    \"\"\"Count the occurrences of a word in a text file.\"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n           \n            words = content.split()\n            \n            count = sum(1 for w in words if w.lower() == word.lower())\n            return count\n    except FileNotFoundError:\n        print(f\"File {file_path} not found.\")\n        return None\n\ndef main():\n    \n    text_files = {\n        \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",\n        \"Walden\": \"Walden.txt\",\n        \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"\n    }\n\n   \n    for title, file_name in text_files.items():\n        count = count_word_occurrences(file_name, 'the')\n        if count is not None:\n            print(f\"Occurrences of 'the' in '{title}': {count}\")\n\nmain()\n</pre> def count_word_occurrences(file_path, word):     \"\"\"Count the occurrences of a word in a text file.\"\"\"     try:         with open(file_path, 'r', encoding='utf-8') as file:             content = file.read()                         words = content.split()                          count = sum(1 for w in words if w.lower() == word.lower())             return count     except FileNotFoundError:         print(f\"File {file_path} not found.\")         return None  def main():          text_files = {         \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",         \"Walden\": \"Walden.txt\",         \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"     }          for title, file_name in text_files.items():         count = count_word_occurrences(file_name, 'the')         if count is not None:             print(f\"Occurrences of 'the' in '{title}': {count}\")  main()  <pre>Occurrences of 'the' in 'This Side of Paradise': 3680\nOccurrences of 'the' in 'Walden': 6604\nOccurrences of 'the' in 'Adventures of Huckleberry Finn': 4424\n</pre> In\u00a0[36]: Copied! <pre>def count_word_occurrences(file_path, word):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            count_with_space = content.lower().count(' ' + word.lower() + ' ')\n            return count_with_space\n    except FileNotFoundError:\n        print(f\"File {file_path} not found.\")\n        return None\n\ndef main():\n    \n    text_files = {\n        \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",\n        \"Walden\": \"Walden.txt\",\n        \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"\n    }\n\n   \n    for title, file_name in text_files.items():\n        count = count_word_occurrences(file_name, 'the')\n        if count is not None:\n            print(f\"Occurrences of 'the' in '{title}': {count}\")\n\nmain()\n</pre> def count_word_occurrences(file_path, word):     try:         with open(file_path, 'r', encoding='utf-8') as file:             content = file.read()             count_with_space = content.lower().count(' ' + word.lower() + ' ')             return count_with_space     except FileNotFoundError:         print(f\"File {file_path} not found.\")         return None  def main():          text_files = {         \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",         \"Walden\": \"Walden.txt\",         \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"     }          for title, file_name in text_files.items():         count = count_word_occurrences(file_name, 'the')         if count is not None:             print(f\"Occurrences of 'the' in '{title}': {count}\")  main() <pre>Occurrences of 'the' in 'This Side of Paradise': 3401\nOccurrences of 'the' in 'Walden': 6139\nOccurrences of 'the' in 'Adventures of Huckleberry Finn': 4120\n</pre> In\u00a0[37]: Copied! <pre>def main():\n    text_files = {\n        \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",\n        \"Walden\": \"Walden.txt\",\n        \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"\n    }\n\n    for title, file_name in text_files.items():\n        try:\n            with open(file_name, 'r', encoding='utf-8') as file:\n                content = file.read().lower()\n                count_with_space = content.count(' the ')\n                print(f\"Occurrences of 'the' (with space) in '{title}': {count_with_space}\")\n        except FileNotFoundError:\n            print(f\"File {file_name} not found.\")\nif __name__ == \"__main__\":\n    main()\n</pre> def main():     text_files = {         \"This Side of Paradise\": \"This_Side_of_Paradise.txt\",         \"Walden\": \"Walden.txt\",         \"Adventures of Huckleberry Finn\": \"Huckleberry_Finn.txt\"     }      for title, file_name in text_files.items():         try:             with open(file_name, 'r', encoding='utf-8') as file:                 content = file.read().lower()                 count_with_space = content.count(' the ')                 print(f\"Occurrences of 'the' (with space) in '{title}': {count_with_space}\")         except FileNotFoundError:             print(f\"File {file_name} not found.\") if __name__ == \"__main__\":     main()  <pre>Occurrences of 'the' (with space) in 'This Side of Paradise': 3401\nOccurrences of 'the' (with space) in 'Walden': 6139\nOccurrences of 'the' (with space) in 'Adventures of Huckleberry Finn': 4120\n</pre>"},{"location":"510labs/GEOG510_lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"510labs/GEOG510_lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"510labs/GEOG510_lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"510labs/GEOG510_lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"510labs/GEOG510_lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"510labs/GEOG510_lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"510labs/GEOG510_lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"510labs/GEOG510_lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"510labs/GEOG510_lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"510labs/GEOG510_lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"510labs/GEOG510_lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"510labs/GEOG510_lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"510labs/GEOG510_lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"510labs/GEOG510_lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"510labs/GEOG510_lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"510labs/GEOG510_lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"510labs/GEOG510_lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"510labs/GEOG510_lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"510labs/GEOG510_lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"510labs/GEOG510_lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"510labs/GEOG510_lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"510labs/GEOG510_lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"510labs/GEOG510_lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"510labs/GEOG510_lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"510labs/GEOG510_lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"510labs/GEOG510_lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"510labs/GEOG510_lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"510labs/GEOG510_lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"510labs/GEOG510_lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"510labs/GEOG510_lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"510labs/GEOG510_lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"510labs/GEOG510_lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"510labs/GEOG_510_lab4/","title":"GEOG 510 lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-02-29 14:38:54.186905\n</pre> In\u00a0[2]: Copied! <pre>x = \"Smith\"\nprint(f\"Hello {x}, would you like to learn python today\")\n</pre> x = \"Smith\" print(f\"Hello {x}, would you like to learn python today\") <pre>Hello Smith, would you like to learn python today\n</pre> In\u00a0[3]: Copied! <pre>x= \"steve smith\"\nprint(x.title())\nprint(x.lower())\nprint(x.upper())\n</pre> x= \"steve smith\" print(x.title()) print(x.lower()) print(x.upper()) <pre>Steve Smith\nsteve smith\nSTEVE SMITH\n</pre> In\u00a0[4]: Copied! <pre>quote = \"If you have built castles in the air, your work need not be lost; that is where they should be.Now put foundations under them.\"\nauthor = \"Henry David Thoreau\"\n\nprint(f'\"{quote}\"\\n- {author}')\n</pre> quote = \"If you have built castles in the air, your work need not be lost; that is where they should be.Now put foundations under them.\" author = \"Henry David Thoreau\"  print(f'\"{quote}\"\\n- {author}') <pre>\"If you have built castles in the air, your work need not be lost; that is where they should be.Now put foundations under them.\"\n- Henry David Thoreau\n</pre> In\u00a0[5]: Copied! <pre>name = \"\\t \\n\\tSteve Smith \\t\\n\"\n\n\nprint(\"Name with whitespace:\", name)\n\n\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre> name = \"\\t \\n\\tSteve Smith \\t\\n\"   print(\"Name with whitespace:\", name)   print(name.lstrip()) print(name.rstrip()) print(name.strip()) <pre>Name with whitespace: \t \n\tSteve Smith \t\n\nSteve Smith \t\n\n\t \n\tSteve Smith\nSteve Smith\n</pre> In\u00a0[6]: Copied! <pre>names= ['Bryson', 'Jack', 'Aiden', 'Dalton']\nfor name in names:\n    print(name)\n</pre> names= ['Bryson', 'Jack', 'Aiden', 'Dalton'] for name in names:     print(name) <pre>Bryson\nJack\nAiden\nDalton\n</pre> In\u00a0[7]: Copied! <pre>motorcycle_brands= ['Harley', 'Honda', 'Suzuki', 'Indian']\nfor brand in motorcycle_brands:\n    print(\"I would like to drive a\", brand, \"motorcylce\")\n</pre> motorcycle_brands= ['Harley', 'Honda', 'Suzuki', 'Indian'] for brand in motorcycle_brands:     print(\"I would like to drive a\", brand, \"motorcylce\") <pre>I would like to drive a Harley motorcylce\nI would like to drive a Honda motorcylce\nI would like to drive a Suzuki motorcylce\nI would like to drive a Indian motorcylce\n</pre> In\u00a0[8]: Copied! <pre>favorite_pizzas = [\"Meat lovers\", \"Veggie\", \"Supreme\"]\n\nprint(\"List of favorite pizzas\")\nfor pizza in favorite_pizzas:\n    print(pizza)\n\nprint(\"\\nSentences about favorite pizzas\")\nfor pizza in favorite_pizzas:\n    print(\"I love\", pizza, \"pizza.\")\n</pre> favorite_pizzas = [\"Meat lovers\", \"Veggie\", \"Supreme\"]  print(\"List of favorite pizzas\") for pizza in favorite_pizzas:     print(pizza)  print(\"\\nSentences about favorite pizzas\") for pizza in favorite_pizzas:     print(\"I love\", pizza, \"pizza.\") <pre>List of favorite pizzas\nMeat lovers\nVeggie\nSupreme\n\nSentences about favorite pizzas\nI love Meat lovers pizza.\nI love Veggie pizza.\nI love Supreme pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>favorite_pizzas = [\"Meat lovers\", \"Veggie\", \"Supreme\"]\n\nprint(\"List of favorite pizzas\")\nfor pizza in favorite_pizzas:\n    print(pizza)\n\nprint(\"\\nSentences about favorite pizzas\")\nfor pizza in favorite_pizzas:\n    print(\"I love\", pizza, \"pizza.\")\n    \nprint(\"\\n I really like pizza!\")\n</pre> favorite_pizzas = [\"Meat lovers\", \"Veggie\", \"Supreme\"]  print(\"List of favorite pizzas\") for pizza in favorite_pizzas:     print(pizza)  print(\"\\nSentences about favorite pizzas\") for pizza in favorite_pizzas:     print(\"I love\", pizza, \"pizza.\")      print(\"\\n I really like pizza!\") <pre>List of favorite pizzas\nMeat lovers\nVeggie\nSupreme\n\nSentences about favorite pizzas\nI love Meat lovers pizza.\nI love Veggie pizza.\nI love Supreme pizza.\n\n I really like pizza!\n</pre> In\u00a0[10]: Copied! <pre>animals = [\"Dog\", \"Bird\", \"Fox\"]\n\nprint(\"List of animals:\")\nfor animal in animals:\n    print(animal)\n\n    \nfor animal in animals:\n    print(\"A\", animal.lower(), \"would make a great pet.\")\n</pre> animals = [\"Dog\", \"Bird\", \"Fox\"]  print(\"List of animals:\") for animal in animals:     print(animal)       for animal in animals:     print(\"A\", animal.lower(), \"would make a great pet.\") <pre>List of animals:\nDog\nBird\nFox\nA dog would make a great pet.\nA bird would make a great pet.\nA fox would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>animals = [\"Dog\", \"Bird\", \"Fox\"]\n\nprint(\"List of animals:\")\nfor animal in animals:\n    print(animal)\n\n    \nfor animal in animals:\n    print(\"A\", animal.lower(), \"would make a great pet.\")\n\n\nprint(\"\\nAny of these animals would make a great pet!\")\n</pre> animals = [\"Dog\", \"Bird\", \"Fox\"]  print(\"List of animals:\") for animal in animals:     print(animal)       for animal in animals:     print(\"A\", animal.lower(), \"would make a great pet.\")   print(\"\\nAny of these animals would make a great pet!\") <pre>List of animals:\nDog\nBird\nFox\nA dog would make a great pet.\nA bird would make a great pet.\nA fox would make a great pet.\n\nAny of these animals would make a great pet!\n</pre> In\u00a0[12]: Copied! <pre>numbers = list(range(1, 101))\n\nminimum = min(numbers)\nmaximum = max(numbers)\n\ntotal_sum = sum(numbers)\n\nprint(numbers)\n\nprint(minimum)\n\nprint(maximum)\n\nprint(total_sum)\n</pre> numbers = list(range(1, 101))  minimum = min(numbers) maximum = max(numbers)  total_sum = sum(numbers)  print(numbers)  print(minimum)  print(maximum)  print(total_sum) <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nfor number in odd_numbers:\n    print(number)\n</pre> odd_numbers = list(range(1, 21, 2))  for number in odd_numbers:     print(number) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>multiples_3 = []\n\nfor number in range(3, 31, 3):\n    print(number)\n</pre> multiples_3 = []  for number in range(3, 31, 3):     print(number) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cubes = [number ** 3 for number in range(1, 11)]\n\nprint(cubes)\n</pre> cubes = [number ** 3 for number in range(1, 11)]  print(cubes) <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[16]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nprint(odd_numbers[:3])\n</pre> odd_numbers = list(range(1, 21, 2))  print(odd_numbers[:3])  <pre>[1, 3, 5]\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>print(\"Three items from the middle of the list are:\")\n\n\nmiddle_start = len(odd_numbers) // 2 - 1\nmiddle_end = middle_start + 3\nprint(odd_numbers[middle_start:middle_end])\n</pre> print(\"Three items from the middle of the list are:\")   middle_start = len(odd_numbers) // 2 - 1 middle_end = middle_start + 3 print(odd_numbers[middle_start:middle_end]) <pre>Three items from the middle of the list are:\n[9, 11, 13]\n</pre> In\u00a0[32]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nprint(\"Three items from the middle of the list are:\",)\nodd_numbers[4:7]\n</pre> odd_numbers = list(range(1, 21, 2))  print(\"Three items from the middle of the list are:\",) odd_numbers[4:7] <pre>Three items from the middle of the list are:\n</pre> Out[32]: <pre>[9, 11, 13]</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nfor number in odd_numbers:\n    print(number)\n\nprint(\"The last three items in the list are:\")\n\nprint(odd_numbers[-3:])\n</pre> odd_numbers = list(range(1, 21, 2))  for number in odd_numbers:     print(number)  print(\"The last three items in the list are:\")  print(odd_numbers[-3:]) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\nThe last three items in the list are:\n[15, 17, 19]\n</pre> In\u00a0[28]: Copied! <pre>foods = (\"Pizza\", \"Pasta\", \"Salad\", \"Sandwich\", \"Soup\")\n\n\nprint(\"The restaurant offers the following foods:\")\nfor food in foods:\n    print(food)\n</pre> foods = (\"Pizza\", \"Pasta\", \"Salad\", \"Sandwich\", \"Soup\")   print(\"The restaurant offers the following foods:\") for food in foods:     print(food) <pre>The restaurant offers the following foods:\nPizza\nPasta\nSalad\nSandwich\nSoup\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[29]: Copied! <pre>foods = (\"Pizza\", \"Pasta\", \"Salad\", \"Sandwich\", \"Soup\")\n\n\nprint(\"Original menu:\")\nfor food in foods:\n    print(food)\n\n\nrevised_foods = (\"Pizza\", \"Sushi\", \"Sandwich\", \"Burger\", \"Soup\")\n\n\nprint(\"\\nRevised menu:\")\nfor food in revised_foods:\n    print(food)\n</pre>  foods = (\"Pizza\", \"Pasta\", \"Salad\", \"Sandwich\", \"Soup\")   print(\"Original menu:\") for food in foods:     print(food)   revised_foods = (\"Pizza\", \"Sushi\", \"Sandwich\", \"Burger\", \"Soup\")   print(\"\\nRevised menu:\") for food in revised_foods:     print(food)  <pre>Original menu:\nPizza\nPasta\nSalad\nSandwich\nSoup\n\nRevised menu:\nPizza\nSushi\nSandwich\nBurger\nSoup\n</pre> In\u00a0[21]: Copied! <pre>alien_color = \"green\"\n\n\nif alien_color == \"green\":\n\n    print(\"Congratulations! You just earned 5 points.\")\n    \nalien_color=\"yellow\"\nif alien_color== \"green\":\n    print(\"Congratulations! You just earned 5 points.\")\n</pre> alien_color = \"green\"   if alien_color == \"green\":      print(\"Congratulations! You just earned 5 points.\")      alien_color=\"yellow\" if alien_color== \"green\":     print(\"Congratulations! You just earned 5 points.\") <pre>Congratulations! You just earned 5 points.\n</pre> In\u00a0[30]: Copied! <pre>age = 28\n\n\nif age &lt; 2:\n    print(\"The person is a baby.\")\nelif age &lt; 4:\n    print(\"The person is a toddler.\")\nelif age &lt; 13:\n    print(\"The person is a kid.\")\nelif age &lt; 20:\n    print(\"The person is a teenager.\")\nelse:\n    print(\"The person is an adult.\")\n</pre>  age = 28   if age &lt; 2:     print(\"The person is a baby.\") elif age &lt; 4:     print(\"The person is a toddler.\") elif age &lt; 13:     print(\"The person is a kid.\") elif age &lt; 20:     print(\"The person is a teenager.\") else:     print(\"The person is an adult.\")  <pre>The person is an adult.\n</pre> In\u00a0[31]: Copied! <pre>favorite_fruits = [\"apple\", \"banana\", \"strawberry\"]\n\n\nif \"apple\" in favorite_fruits:\n    print(\"You really like apples!\")\nif \"banana\" in favorite_fruits:\n    print(\"You really like bananas!\")\nif \"orange\" in favorite_fruits:\n    print(\"You really like oranges!\")\nif \"mango\" in favorite_fruits:\n    print(\"You really like mangoes!\")\nif \"strawberry\" in favorite_fruits:\n    print(\"You really like strawberries!\")\n</pre>  favorite_fruits = [\"apple\", \"banana\", \"strawberry\"]   if \"apple\" in favorite_fruits:     print(\"You really like apples!\") if \"banana\" in favorite_fruits:     print(\"You really like bananas!\") if \"orange\" in favorite_fruits:     print(\"You really like oranges!\") if \"mango\" in favorite_fruits:     print(\"You really like mangoes!\") if \"strawberry\" in favorite_fruits:     print(\"You really like strawberries!\")  <pre>You really like apples!\nYou really like bananas!\nYou really like strawberries!\n</pre> In\u00a0[24]: Copied! <pre>usernames = [\"admin\", \"alice\", \"bob\", \"charlie\", \"david\"]\n\n\nfor username in usernames:\n    if username == \"admin\":\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username.title()}, thank you for logging in again.\")\n</pre>  usernames = [\"admin\", \"alice\", \"bob\", \"charlie\", \"david\"]   for username in usernames:     if username == \"admin\":         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username.title()}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Alice, thank you for logging in again.\nHello Bob, thank you for logging in again.\nHello Charlie, thank you for logging in again.\nHello David, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = [\"Alice\", \"Audrey\", \"Charlie\", \"David\", \"Eve\"]\n\n\nnew_users = [\"Audrey\", \"Aiden\", \"Amy\", \"Ansel\", \"Alice\"]\n\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\n\nfor user in new_users:\n    if user.lower() in current_users_lower:\n        print(f\"Sorry, the username '{user}' is already taken. Please enter a new username.\")\n    else:\n        print(f\"The username '{user}' is available.\")\n</pre> current_users = [\"Alice\", \"Audrey\", \"Charlie\", \"David\", \"Eve\"]   new_users = [\"Audrey\", \"Aiden\", \"Amy\", \"Ansel\", \"Alice\"]   current_users_lower = [user.lower() for user in current_users]   for user in new_users:     if user.lower() in current_users_lower:         print(f\"Sorry, the username '{user}' is already taken. Please enter a new username.\")     else:         print(f\"The username '{user}' is available.\")  <pre>Sorry, the username 'Audrey' is already taken. Please enter a new username.\nThe username 'Aiden' is available.\nThe username 'Amy' is available.\nThe username 'Ansel' is available.\nSorry, the username 'Alice' is already taken. Please enter a new username.\n</pre> In\u00a0[27]: Copied! <pre>numbers = list(range(1, 10))\n\nfor number in numbers:\n   \n    if number == 1:\n        ordinal = \"st\"\n    elif number == 2:\n        ordinal = \"nd\"\n    elif number == 3:\n        ordinal = \"rd\"\n    else:\n        ordinal = \"th\"\n    \n    \n    print(f\"{number}{ordinal}\")\n</pre> numbers = list(range(1, 10))  for number in numbers:         if number == 1:         ordinal = \"st\"     elif number == 2:         ordinal = \"nd\"     elif number == 3:         ordinal = \"rd\"     else:         ordinal = \"th\"               print(f\"{number}{ordinal}\")  <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"510labs/GEOG_510_lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"510labs/GEOG_510_lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"510labs/GEOG_510_lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"510labs/GEOG_510_lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"510labs/GEOG_510_lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"510labs/GEOG_510_lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"510labs/GEOG_510_lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"510labs/GEOG_510_lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"510labs/GEOG_510_lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"510labs/GEOG_510_lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"510labs/GEOG_510_lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"510labs/GEOG_510_lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"510labs/GEOG_510_lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"510labs/GEOG_510_lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"510labs/GEOG_510_lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"510labs/GEOG_510_lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"510labs/GEOG_510_lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"510labs/GEOG_510_lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"510labs/GEOG_510_lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"510labs/GEOG_510_lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"510labs/GEOG_510_lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"510labs/GEOG_510_lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import sturgmap\n</pre> import sturgmap In\u00a0[2]: Copied! <pre>m=sturgmap.Map(center=[40,-10], zoom=2)\nm\n</pre> m=sturgmap.Map(center=[40,-10], zoom=2) m <pre>Map(center=[40, -10], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_te\u2026</pre> In\u00a0[3]: Copied! <pre>import sturgmap.foliumap as sturgmap\n</pre> import sturgmap.foliumap as sturgmap  In\u00a0[4]: Copied! <pre>m= sturgmap.Map()\nurl = \"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\"\nm.add_raster(url, name='landsat.tif', opacity=0.4)\nm\n</pre> m= sturgmap.Map() url = \"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\" m.add_raster(url, name='landsat.tif', opacity=0.4) m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>m= sturgmap.Map(center=(40, -100))\nm.add_basemap('OpenTopoMap')\nm\n</pre> m= sturgmap.Map(center=(40, -100)) m.add_basemap('OpenTopoMap') m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>import sturgmap.foliumap as sturgmap\nimport folium\n</pre> import sturgmap.foliumap as sturgmap import folium In\u00a0[7]: Copied! <pre>m= sturgmap.Map([30, 20], zoom=4)\nlayer_left = folium.TileLayer('cartodbpositron')\nlayer_right = folium.TileLayer('openstreetmap')\n\nm.add_side_by_side_layers(layer_left, layer_right)\n\nm\n</pre> m= sturgmap.Map([30, 20], zoom=4) layer_left = folium.TileLayer('cartodbpositron') layer_right = folium.TileLayer('openstreetmap')  m.add_side_by_side_layers(layer_left, layer_right)  m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>#m = folium.Map(location=(30, 20), zoom_start=4)\nm= sturgmap.Map([30, 20], zoom=4)\n\nlayer_right = folium.TileLayer('openstreetmap')\nlayer_left = folium.TileLayer('cartodbpositron')\n\nsbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)\n\nlayer_left.add_to(m)\nlayer_right.add_to(m)\nsbs.add_to(m)\n\nm\n</pre> #m = folium.Map(location=(30, 20), zoom_start=4) m= sturgmap.Map([30, 20], zoom=4)  layer_right = folium.TileLayer('openstreetmap') layer_left = folium.TileLayer('cartodbpositron')  sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)  layer_left.add_to(m) layer_right.add_to(m) sbs.add_to(m)  m Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>#m= sturgmap.Map()\n#m.add_shp(\"us_southeast.shp\", name=\"Countries\")\n#m.add_layers_control()\n\n#m\n</pre> #m= sturgmap.Map() #m.add_shp(\"us_southeast.shp\", name=\"Countries\") #m.add_layers_control()  #m"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"<p>Importing Sturgmap to begin the process of analysis for ipyleaflet functionality/comparison</p> In\u00a0[8]: Copied! <pre>import sturgmap\n</pre> import sturgmap <p>Adding a Tile Layer</p> In\u00a0[9]: Copied! <pre>m= sturgmap.Map()\nurl= \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\nm.add_tile_layer(url, name= 'world imagery', attribution='Esri')\n\n\nm\n</pre>  m= sturgmap.Map() url= \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" m.add_tile_layer(url, name= 'world imagery', attribution='Esri')   m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[10]: Copied! <pre>m= sturgmap.Map()\n\nm\n</pre> m= sturgmap.Map()  m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> <p>Viewing a basemap using ipyleaflet</p> In\u00a0[11]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38.128, 2.588]\nzoom = 5\n\nm= Map(basemap=basemaps.NASAGIBS.ViirsTrueColorCR, center=center, zoom=zoom)\nm\n</pre> from ipyleaflet import Map, basemaps  center = [38.128, 2.588] zoom = 5  m= Map(basemap=basemaps.NASAGIBS.ViirsTrueColorCR, center=center, zoom=zoom) m <pre>Map(center=[38.128, 2.588], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_\u2026</pre> <p>Looking for the URL associated with aforementioned basemap</p> In\u00a0[12]: Copied! <pre>m.layers\n</pre> m.layers Out[12]: <pre>(TileLayer(attribution='Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (&lt;a href=\"https://earthdata.nasa.gov\"&gt;ESDIS&lt;/a&gt;) with funding provided by NASA/HQ.', base=True, max_zoom=9, min_zoom=1, name='NASAGIBS.ViirsTrueColorCR', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_CorrectedReflectance_TrueColor/default/2024-03-26/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg'),)</pre> <p>Seeing the different controls associated with a basemap in ipyleaflet</p> In\u00a0[13]: Copied! <pre>m.controls\n</pre> m.controls Out[13]: <pre>(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text', 'zoom_out_title']),\n AttributionControl(options=['position', 'prefix'], position='bottomright'))</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Creating Dropdown List for Basemap Selection</p> In\u00a0[1]: Copied! <pre>import sturgmap\n</pre> import sturgmap In\u00a0[2]: Copied! <pre>m= sturgmap.Map()\nm.add_basemap_gui()\nm\n</pre> m= sturgmap.Map() m.add_basemap_gui() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> <p>Adding widgets and button for closing drop down list</p> In\u00a0[12]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[3]: Copied! <pre>import sturgmap\n</pre> import sturgmap In\u00a0[4]: Copied! <pre>m= sturgmap.Map()\nm\n</pre> m= sturgmap.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[13]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[14]: Copied! <pre>with output_widget:\n    print(\"I am confused\")\n</pre> with output_widget:     print(\"I am confused\") In\u00a0[7]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get(\"coordinates\")\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get(\"type\") == \"click\":\n        with output_widget:\n            output_widget.clear_output()\n            print(\"You clicked at: {}\".format(latlon))\n\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get(\"coordinates\")     # latlon = [round(x, 2) for x in latlon]     if kwargs.get(\"type\") == \"click\":         with output_widget:             output_widget.clear_output()             print(\"You clicked at: {}\".format(latlon))   m.on_interaction(handle_interaction) In\u00a0[15]: Copied! <pre>btn = widgets.Button(icon=\"times\", button_style=\"primary\")\nbtn.layout.width = \"35px\"\nbtn\n</pre> btn = widgets.Button(icon=\"times\", button_style=\"primary\") btn.layout.width = \"35px\" btn <pre>Button(button_style='primary', icon='times', layout=Layout(width='35px'), style=ButtonStyle())</pre> In\u00a0[16]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"Esri.NatGeoWorldMap\"],\n    value=\"OpenStreetMap\",\n)\ndropdown.layout.width = \"150px\"\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"Esri.NatGeoWorldMap\"],     value=\"OpenStreetMap\", ) dropdown.layout.width = \"150px\" dropdown <pre>Dropdown(layout=Layout(width='150px'), options=('OpenStreetMap', 'OpenTopoMap', 'Esri.WorldImagery', 'Esri.Nat\u2026</pre> In\u00a0[17]: Copied! <pre>box = widgets.HBox([dropdown, btn])\nbox\n</pre> box = widgets.HBox([dropdown, btn]) box <pre>HBox(children=(Dropdown(layout=Layout(width='150px'), options=('OpenStreetMap', 'OpenTopoMap', 'Esri.WorldImag\u2026</pre> In\u00a0[18]: Copied! <pre>m= sturgmap.Map()\nm\n</pre> m= sturgmap.Map() m  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[19]: Copied! <pre>m.add_widget(box)\n</pre> m.add_widget(box)"},{"location":"examples/practice/","title":"Practice","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre> In\u00a0[2]: Copied! <pre>import sturgmap\nimport ipyleaflet\n</pre> import sturgmap import ipyleaflet"},{"location":"examples/raster/","title":"Raster","text":"<p>The code below some of the raster functionality and capability of the sturgmap package</p> In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, ImageOverlay\n\nm = Map(center=(25, -115), zoom=4)\n\nimage = ImageOverlay(\n    url=\"https://i.imgur.com/06Q1fSz.png\",\n    # url='../06Q1fSz.png',\n    bounds=((13, -130), (32, -100))\n)\n\nm.add(image)\nm\n</pre> from ipyleaflet import Map, ImageOverlay  m = Map(center=(25, -115), zoom=4)  image = ImageOverlay(     url=\"https://i.imgur.com/06Q1fSz.png\",     # url='../06Q1fSz.png',     bounds=((13, -130), (32, -100)) )  m.add(image) m <pre>Map(center=[25, -115], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[2]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[3]: Copied! <pre>m.layers\n</pre> m.layers Out[3]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n ImageOverlay(bounds=[(13, -130), (32, -100)], options=['attribution'], url='https://i.imgur.com/06Q1fSz.png'))</pre> In\u00a0[4]: Copied! <pre>import sturgmap\n</pre> import sturgmap In\u00a0[5]: Copied! <pre>import rasterio\n</pre> import rasterio <p>After importing sturgmap, this code displays how you can use the package to determine the basic statistics of the raster you imported into your basemap and the add_raster function zooms to where the raster is displayed in the map</p> In\u00a0[6]: Copied! <pre>m = sturgmap.Map()\nraster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif'\nm.add_raster(raster)\nwith rasterio.open(raster) as src:\n    m.calculate_statistics(src)\n\nm\n</pre> m = sturgmap.Map() raster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif' m.add_raster(raster) with rasterio.open(raster) as src:     m.calculate_statistics(src)  m <pre>Warning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\n</pre> <pre>Minimum: 488.0\nMaximum: 2102.0\nMean: 1021.3813167550014\nStandard Deviation: 259.01729567301714\n</pre> <pre>Map(center=[53.40708942911584, 6.875480605829788], controls=(ZoomControl(options=['position', 'zoom_in_text', \u2026</pre> <pre>[2024-05-06 01:03:31,857] ERROR in app: Exception on /api/tiles/9/81/197.png [GET]\nTraceback (most recent call last):\n  File \"rasterio/_io.pyx\", line 975, in rasterio._io.DatasetReaderBase._read\n  File \"rasterio/_io.pyx\", line 213, in rasterio._io.io_multi_band\n  File \"rasterio/_err.pyx\", line 195, in rasterio._err.exc_wrap_int\nrasterio._err.CPLE_AppDefinedError: IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 1, Y offset 0: TIFFReadEncodedTile() failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1484, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1469, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/api.py\", line 404, in wrapper\n    resp = resource(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/views.py\", line 109, in view\n    return current_app.ensure_sync(self.dispatch_request)(**kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/resource.py\", line 46, in dispatch_request\n    resp = meth(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 399, in decorated_function\n    rv = self._call_fn(f, *args, **kwargs)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 175, in _call_fn\n    return ensure_sync(fn)(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/localtileserver/web/rest.py\", line 367, in get\n    tile_binary = tile_source.getTile(x, y, z)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image/cache_util/cache.py\", line 98, in wrapper\n    v = func(self, *args, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image_source_rasterio/__init__.py\", line 617, in getTile\n    tile = vrt.read(resampling=Resampling.nearest)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rasterio/_warp.pyx\", line 1240, in rasterio._warp.WarpedVRTReaderBase.read\n  File \"rasterio/_io.pyx\", line 651, in rasterio._io.DatasetReaderBase.read\n  File \"rasterio/_io.pyx\", line 978, in rasterio._io.DatasetReaderBase._read\nrasterio.errors.RasterioIOError: Read or write failed. IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 1, Y offset 0: TIFFReadEncodedTile() failed.\n[2024-05-06 01:03:34,796] ERROR in app: Exception on /api/tiles/9/82/197.png [GET]\nTraceback (most recent call last):\n  File \"rasterio/_io.pyx\", line 975, in rasterio._io.DatasetReaderBase._read\n  File \"rasterio/_io.pyx\", line 213, in rasterio._io.io_multi_band\n  File \"rasterio/_err.pyx\", line 195, in rasterio._err.exc_wrap_int\nrasterio._err.CPLE_AppDefinedError: IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 2, Y offset 0: TIFFReadEncodedTile() failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1484, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1469, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/api.py\", line 404, in wrapper\n    resp = resource(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/views.py\", line 109, in view\n    return current_app.ensure_sync(self.dispatch_request)(**kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/resource.py\", line 46, in dispatch_request\n    resp = meth(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 399, in decorated_function\n    rv = self._call_fn(f, *args, **kwargs)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 175, in _call_fn\n    return ensure_sync(fn)(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/localtileserver/web/rest.py\", line 367, in get\n    tile_binary = tile_source.getTile(x, y, z)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image/cache_util/cache.py\", line 98, in wrapper\n    v = func(self, *args, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image_source_rasterio/__init__.py\", line 617, in getTile\n    tile = vrt.read(resampling=Resampling.nearest)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rasterio/_warp.pyx\", line 1240, in rasterio._warp.WarpedVRTReaderBase.read\n  File \"rasterio/_io.pyx\", line 651, in rasterio._io.DatasetReaderBase.read\n  File \"rasterio/_io.pyx\", line 978, in rasterio._io.DatasetReaderBase._read\nrasterio.errors.RasterioIOError: Read or write failed. IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 2, Y offset 0: TIFFReadEncodedTile() failed.\n[2024-05-06 01:03:37,051] ERROR in app: Exception on /api/tiles/9/81/198.png [GET]\nTraceback (most recent call last):\n  File \"rasterio/_io.pyx\", line 975, in rasterio._io.DatasetReaderBase._read\n  File \"rasterio/_io.pyx\", line 213, in rasterio._io.io_multi_band\n  File \"rasterio/_err.pyx\", line 195, in rasterio._err.exc_wrap_int\nrasterio._err.CPLE_AppDefinedError: IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 0, Y offset 2: TIFFReadEncodedTile() failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1484, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1469, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/api.py\", line 404, in wrapper\n    resp = resource(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/views.py\", line 109, in view\n    return current_app.ensure_sync(self.dispatch_request)(**kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/resource.py\", line 46, in dispatch_request\n    resp = meth(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 399, in decorated_function\n    rv = self._call_fn(f, *args, **kwargs)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 175, in _call_fn\n    return ensure_sync(fn)(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/localtileserver/web/rest.py\", line 367, in get\n    tile_binary = tile_source.getTile(x, y, z)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image/cache_util/cache.py\", line 98, in wrapper\n    v = func(self, *args, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image_source_rasterio/__init__.py\", line 617, in getTile\n    tile = vrt.read(resampling=Resampling.nearest)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rasterio/_warp.pyx\", line 1240, in rasterio._warp.WarpedVRTReaderBase.read\n  File \"rasterio/_io.pyx\", line 651, in rasterio._io.DatasetReaderBase.read\n  File \"rasterio/_io.pyx\", line 978, in rasterio._io.DatasetReaderBase._read\nrasterio.errors.RasterioIOError: Read or write failed. IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 0, Y offset 2: TIFFReadEncodedTile() failed.\n[2024-05-06 01:03:39,812] ERROR in app: Exception on /api/tiles/9/82/198.png [GET]\nTraceback (most recent call last):\n  File \"rasterio/_io.pyx\", line 975, in rasterio._io.DatasetReaderBase._read\n  File \"rasterio/_io.pyx\", line 213, in rasterio._io.io_multi_band\n  File \"rasterio/_err.pyx\", line 195, in rasterio._err.exc_wrap_int\nrasterio._err.CPLE_AppDefinedError: IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 2, Y offset 2: TIFFReadEncodedTile() failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1484, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/app.py\", line 1469, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/api.py\", line 404, in wrapper\n    resp = resource(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask/views.py\", line 109, in view\n    return current_app.ensure_sync(self.dispatch_request)(**kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_restx/resource.py\", line 46, in dispatch_request\n    resp = meth(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 399, in decorated_function\n    rv = self._call_fn(f, *args, **kwargs)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/flask_caching/__init__.py\", line 175, in _call_fn\n    return ensure_sync(fn)(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/localtileserver/web/rest.py\", line 367, in get\n    tile_binary = tile_source.getTile(x, y, z)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image/cache_util/cache.py\", line 98, in wrapper\n    v = func(self, *args, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/williamsturgill/anaconda3/envs/geo/lib/python3.11/site-packages/large_image_source_rasterio/__init__.py\", line 617, in getTile\n    tile = vrt.read(resampling=Resampling.nearest)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rasterio/_warp.pyx\", line 1240, in rasterio._warp.WarpedVRTReaderBase.read\n  File \"rasterio/_io.pyx\", line 651, in rasterio._io.DatasetReaderBase.read\n  File \"rasterio/_io.pyx\", line 978, in rasterio._io.DatasetReaderBase._read\nrasterio.errors.RasterioIOError: Read or write failed. IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 2, Y offset 2: TIFFReadEncodedTile() failed.\n</pre> In\u00a0[7]: Copied! <pre>import sturgmap\n</pre> import sturgmap  <p>The code below shows how you can use the add image function to overlay an image onto your basemap</p> In\u00a0[8]: Copied! <pre>m= sturgmap.Map()\n\nm.add_basemap('OpenTopoMap')\nimage_url = 'https://gifer.com/en/3P6H'\nimage_bounds = [(0, -60), (30, -30)]\nm.add_image(url=image_url, bounds=image_bounds, name='Test Image Overlay')\n\nm\n</pre> m= sturgmap.Map()  m.add_basemap('OpenTopoMap') image_url = 'https://gifer.com/en/3P6H' image_bounds = [(0, -60), (30, -30)] m.add_image(url=image_url, bounds=image_bounds, name='Test Image Overlay')  m  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> <p>This code shows how you can add a raster tif file to your basemap for display directly from a url link. The same can be done if you have a locally installed raster file</p> In\u00a0[9]: Copied! <pre>m = sturgmap.Map()\ndata= 'https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif'\nm.add_raster(data, name=\"Landsat\")\n\nm\n</pre> m = sturgmap.Map() data= 'https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif' m.add_raster(data, name=\"Landsat\")  m <pre>Map(center=[37.77362148225351, -122.34097463930294], controls=(ZoomControl(options=['position', 'zoom_in_text'\u2026</pre> <pre>ERROR 1: TIFFFillTile:Read error at row 0, col 0, tile 1; got 0 bytes, expected 158099\nERROR 1: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 1, Y offset 0: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 1, Y offset 0: TIFFReadEncodedTile() failed.\nERROR 1: Request for 1917567-2607004 failed with response_code=401\nERROR 1: Request for 2887615-3514996 failed with response_code=401\nERROR 1: Request for 3881652-4356208 failed with response_code=401\nERROR 1: TIFFFillTile:Read error at row 0, col 0, tile 2; got 0 bytes, expected 293852\nERROR 1: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 2, Y offset 0: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 0, Y offset 1: IReadBlock failed at X offset 2, Y offset 0: TIFFReadEncodedTile() failed.\nERROR 1: Request for 3514993-3958377 failed with response_code=401\nERROR 1: Request for 4356205-4670438 failed with response_code=401\nERROR 1: TIFFFillTile:Read error at row 0, col 0, tile 10; got 0 bytes, expected 53305\nERROR 1: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 0, Y offset 2: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 0, Y offset 2: TIFFReadEncodedTile() failed.\nERROR 1: Request for 3881652-4356208 failed with response_code=401\nERROR 1: Request for 4606259-4872763 failed with response_code=401\nERROR 1: TIFFFillTile:Read error at row 0, col 0, tile 12; got 0 bytes, expected 76714\nERROR 1: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 2, Y offset 2: TIFFReadEncodedTile() failed.\nERROR 1: IReadBlock failed at X offset 0, Y offset 0: IReadBlock failed at X offset 2, Y offset 2: TIFFReadEncodedTile() failed.\n</pre> <p>The code below shows how you can compute the histogram of pixel values for your raster using the sturgmap code in line with rasterio</p> In\u00a0[10]: Copied! <pre>m = sturgmap.Map()\nraster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif'\nm.add_raster(raster)\nwith rasterio.open(raster) as raster:  \n    m.display_raster_histogram(raster)\nm\n</pre> m = sturgmap.Map() raster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif' m.add_raster(raster) with rasterio.open(raster) as raster:       m.display_raster_histogram(raster) m <pre>Warning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\nWarning 1: TIFFReadDirectory:Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.\n</pre> <pre>Map(center=[53.40708942911584, 6.875480605829788], controls=(ZoomControl(options=['position', 'zoom_in_text', \u2026</pre> In\u00a0[11]: Copied! <pre>m = sturgmap.Map()\nraster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif'\nm.add_raster(raster)\nwith rasterio.open(raster) as raster:  \n    m.compute_ndvi(raster,raster)\nm\n</pre> m = sturgmap.Map() raster= 'https://github.com/opengeos/datasets/releases/download/raster/cog.tif' m.add_raster(raster) with rasterio.open(raster) as raster:       m.compute_ndvi(raster,raster) m <pre>Map(center=[53.40708942911584, 6.875480605829788], controls=(ZoomControl(options=['position', 'zoom_in_text', \u2026</pre>"},{"location":"examples/splitmap/","title":"Splitmap","text":"In\u00a0[1]: Copied! <pre>import sturgmap\n</pre> import sturgmap  In\u00a0[2]: Copied! <pre>m=sturgmap.Map()\nm.add_basemap('Esri.WorldImagery')\nm\n</pre> m=sturgmap.Map() m.add_basemap('Esri.WorldImagery') m Out[2]: In\u00a0[3]: Copied! <pre>m.layers\n</pre> m.layers Out[3]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(name='Esri.WorldImagery', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'))</pre> <p>This code splits the map based on the two urls from TileLayers you input or found via the code above (m.layers on a basemap you imported)</p> In\u00a0[4]: Copied! <pre>m = sturgmap.Map(center=(40.7128, -74.0059), zoom=13)\nm.split_map_basemap(left_layer=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\", right_layer=\"https://{s}.tiles.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png\")\n\nm.add_scale_bar()\nm\n</pre> m = sturgmap.Map(center=(40.7128, -74.0059), zoom=13) m.split_map_basemap(left_layer=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\", right_layer=\"https://{s}.tiles.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png\")  m.add_scale_bar() m Out[4]: In\u00a0[5]: Copied! <pre>import sturgmap\nfrom ipyleaflet import basemaps, basemap_to_tiles\n</pre> import sturgmap from ipyleaflet import basemaps, basemap_to_tiles  In\u00a0[6]: Copied! <pre>m =sturgmap.Map()\nleft_layer = basemap_to_tiles(basemap=basemaps.OpenTopoMap)\nright_layer = basemap_to_tiles(basemap=basemaps.Esri.WorldImagery)\nm.add_split_map(left_layer=left_layer, right_layer=right_layer)\nm.add_layers_control()\nm\n</pre> m =sturgmap.Map() left_layer = basemap_to_tiles(basemap=basemaps.OpenTopoMap) right_layer = basemap_to_tiles(basemap=basemaps.Esri.WorldImagery) m.add_split_map(left_layer=left_layer, right_layer=right_layer) m.add_layers_control() m Out[6]: In\u00a0[7]: Copied! <pre>m= sturgmap.Map(center=(20, 0), zoom=2)\nm.add_coordinate_widget()\n\nm\n</pre> m= sturgmap.Map(center=(20, 0), zoom=2) m.add_coordinate_widget()  m Out[7]:"},{"location":"examples/vectordata/","title":"Vectordata","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import basemaps\n</pre> from ipyleaflet import basemaps In\u00a0[2]: Copied! <pre>basemaps.OpenTopoMap\n</pre> basemaps.OpenTopoMap Out[2]: xyzservices.TileProvider OpenTopoMap urlhttps://{s}.tile.opentopomap.org/{z}/{x}/{y}.pngmax_zoom17html_attributionMap data: \u00a9 OpenStreetMap contributors, SRTM | Map style: \u00a9 OpenTopoMap (CC-BY-SA)attributionMap data: (C) OpenStreetMap contributors, SRTM | Map style: (C) OpenTopoMap (CC-BY-SA) In\u00a0[3]: Copied! <pre>import sturgmap\n</pre> import sturgmap In\u00a0[4]: Copied! <pre>url=eval(\"basemaps.OpenTopoMap\").build_url()\n</pre> url=eval(\"basemaps.OpenTopoMap\").build_url() In\u00a0[5]: Copied! <pre>m= sturgmap.Map()\nm.add_basemap(\"NASAGIBS.ModisAquaBands721CR\")\n\nm\n</pre> m= sturgmap.Map() m.add_basemap(\"NASAGIBS.ModisAquaBands721CR\")  m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[6]: Copied! <pre>m= sturgmap.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_geojson(\"countries.geojson\", style={\"color\": \"blue\"}, hover_style={\"fillColor\": \"#ff0000\"})\nm\n</pre> m= sturgmap.Map() m.add_basemap(\"OpenTopoMap\") m.add_geojson(\"countries.geojson\", style={\"color\": \"blue\"}, hover_style={\"fillColor\": \"#ff0000\"}) m   <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[7]: Copied! <pre>m= sturgmap.Map()\nm.add_vector(\"europe_110.geo.json\")\nm\n</pre> m= sturgmap.Map() m.add_vector(\"europe_110.geo.json\") m  <pre>Error reading vector data from file: name 'gpd' is not defined\n</pre> <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[8]: Copied! <pre>m=sturgmap.Map()\nm.add_shp(\"countries1.shp\", name=\"countries\")\nm\n</pre> m=sturgmap.Map() m.add_shp(\"countries1.shp\", name=\"countries\") m  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}